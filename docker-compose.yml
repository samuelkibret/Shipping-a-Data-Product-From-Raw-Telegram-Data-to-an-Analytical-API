version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:13 # Using a stable PostgreSQL image
    container_name: postgres_db_week7
    environment:
      POSTGRES_DB: ${DB_NAME} # Database name from .env
      POSTGRES_USER: ${DB_USER} # Database user from .env
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Database password from .env
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432
    volumes:
      - db_data:/var/lib/postgresql/data # Persistent volume for database data
    healthcheck: # Health check to ensure DB is ready before app starts
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Python Application Service
  app:
    build: . # Build the image from the Dockerfile in the current directory
    container_name: python_app_week7
    command: sh -c "python your_main_script.py" # Placeholder command, will be updated for Dagster/FastAPI
    volumes:
      - .:/app # Mount the current project directory into the container's /app
    ports:
      - "8000:8000" # Expose FastAPI port
    environment:
      DB_HOST: db # Hostname for the database (Docker service name)
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # environment variables from .env
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      # ... any other secrets for YOLO, etc.
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting app
    # networks: # Optional: if you need custom networks
    #   - my_custom_network

volumes:
  db_data: # Define the named volume for database persistence

# networks:
#   my_custom_network:
#     driver: bridge